using eg.types
using eg.video

// Configure region of interest here.
// We can then do motion detection in a small region of the video.
ROI1
{
- (Vec2i32, Position){640*0, 0}
- (Vec2i32, Area){640, 400}
}

ROI2
{
- (Vec2i32, Position){640*1, 0}
- (Vec2i32, Area){640, 400}
}

ROI3
{
- (Vec2i32, Position){640*2, 0}
- (Vec2i32, Area){640, 400}
}




// Video capture input
ImageCap
{
  - Tensor2_U8C3
}




// Regions of interest new images:
Image1
{
  - Tensor2_U8C3
}

Image2
{
  - Tensor2_U8C3
}

Image3
{
  - Tensor2_U8C3
}




// Configure Video source:
Vid1 : ImageCap
{
  - Device{"2022-12-15_14-56-29.mp4"}
  - VideoReader
  - (Action, Open)
}




// Add copy commands to copy regions of intersest into new images:
Copy1 : ROI1
{
- (CopyFrom, ImageCap)
- (CopyTo, Image1)
}
Copy2 : ROI2
{
- (CopyFrom, ImageCap)
- (CopyTo, Image2)
}
Copy3 : ROI3
{
- (CopyFrom, ImageCap)
- (CopyTo, Image3)
}



Direction1
{
  - (Vec2f32, Velocity){0,0}
}
Direction2
{
  - (Vec2f32, Velocity){0,0}
}
Direction3
{
  - (Vec2f32, Velocity){0,0}
}


MotionEstimator1 : Image1, Direction1
{
  - eg.motion.MotionEstimator
}

MotionEstimator2 : Image2, Direction2
{
  - eg.motion.MotionEstimator
}

MotionEstimator3 : Image3, Direction3
{
  - eg.motion.MotionEstimator
}



// Setup a visual confirmation by drawing on a window:
Window1
{
  - Window
  - Tensor2_U8C3
  - (Vec2i32, Resolution){1920, 400}
  DrawVid1 : ImageCap
  {
    - (Vec2i32, Position){0,0}
  }
  DrawROI1 : ROI1
  DrawROI2 : ROI2
  DrawROI3 : ROI3
  DrawArrow1 : Direction1
  {
    - (Vec2i32, Position){640*0 + 640/2, 480/2}
  }
  DrawArrow2 : Direction2
  {
    - (Vec2i32, Position){640*1 + 640/2, 480/2}
  }
  DrawArrow3 : Direction3
  {
    - (Vec2i32, Position){640*2 + 640/2, 480/2}
  }
}





